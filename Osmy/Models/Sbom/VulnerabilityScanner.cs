using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using QuickGraph;
using System.Threading;
using System.Linq;

namespace Osmy.Models.Sbom
{
    internal class VulnerabilityScanner : IDisposable
    {
        private readonly OSVClientEx _client = new();

        public void Dispose()
        {
            _client.Dispose();
        }

        public async Task<VulnerabilityScanResult> Scan(Sbom sbom, CancellationToken cancellationToken)
        {
            // MEMO: dfs.VisitedGraphはコンストラクタで渡したグラフのことで，実際に訪問した頂点と辺からなるグラフではない
            var dfs = new QuickGraph.Algorithms.Search.DepthFirstSearchAlgorithm<SbomPackage, IEdge<SbomPackage>>(sbom.DependencyGraph);
            var visited = new HashSet<SbomPackage>(sbom.RootPackages);
            dfs.TreeEdge += x => visited.Add(x.Target);
            foreach (SbomPackage package in sbom.RootPackages)
            {
                dfs.Compute(package);
            }

            var executed = DateTime.Now;
            var pkgScanResults = await ScanPackageVulnerability(visited, cancellationToken).ConfigureAwait(false);

            return new VulnerabilityScanResult(executed, sbom, pkgScanResults);
        }

        private async Task<PackageScanResult> ScanPackageVulnerability(SbomPackage pkg, CancellationToken cancellationToken)
        {
            var query = new QueryEx
            {
                Package = new QueryExPackage
                {
                    Name = pkg.Name,
                },
                Version = pkg.Version,
            };

            var result = await _client.QueryAffectedAsync(query, cancellationToken).ConfigureAwait(false);

            return new PackageScanResult(pkg, result);
        }

        private async Task<PackageScanResult[]> ScanPackageVulnerability(IEnumerable<SbomPackage> pkgs, CancellationToken cancellationToken)
        {
            var chunkedResults = await Task.WhenAll(pkgs.Chunk(1000).Select(chunk =>
            {
                var batchQuery = new BatchQueryEx(
                    chunk.Select(pkg => new QueryEx
                    {
                        Package = new QueryExPackage
                        {
                            Name = pkg.Name,
                        },
                        Version = pkg.Version,
                    }));

                return _client.QueryAffectedBatchAsync(batchQuery, cancellationToken);
            })).ConfigureAwait(false);
            var results = chunkedResults.SelectMany(result => result.Results);

            var ret = new PackageScanResult[pkgs.Count()];
            var pkgEnumerator = pkgs.GetEnumerator();
            var resultEnumerator = results.GetEnumerator();
            for (int i = 0; i < ret.Length; i++)
            {
                if (!pkgEnumerator.MoveNext()) { throw new Exception(); }
                if (!resultEnumerator.MoveNext()) { throw new Exception(); }
                ret[i] = new PackageScanResult(pkgEnumerator.Current, resultEnumerator.Current);
            }

            return ret;
        }
    }
}
