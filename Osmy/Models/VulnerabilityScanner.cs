using OSV.Client.Models;
using OSV.Client;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using QuickGraph;

namespace Osmy.Models
{
    internal class VulnerabilityScanner : IDisposable
    {
        private readonly OSVClient _client = new();

        public void Dispose()
        {
            _client.Dispose();
        }

        public async Task<bool> Scan(Sbom.Sbom sbom)
        {
            bool hasVulns = false;

            // MEMO: dfs.VisitedGraphはコンストラクタで渡したグラフのことで，実際に訪問した頂点と辺からなるグラフではない
            var dfs = new QuickGraph.Algorithms.Search.DepthFirstSearchAlgorithm<Sbom.Package, IEdge<Sbom.Package>>(sbom.DependencyGraph);
            var visited = new HashSet<Sbom.Package>() { sbom.RootPackage };
            dfs.TreeEdge += x => visited.Add(x.Target);
            dfs.Compute(sbom.RootPackage);

            foreach (Sbom.Package pkg in visited)
            {
                hasVulns |= await IsPackageVulnerable(pkg);
            }

            return hasVulns;
        }

        private async Task<bool> IsPackageVulnerable(Sbom.Package pkg)
        {
            var query = new Query
            {
                Package = new OSV.Schema.Package
                {
                    Name = pkg.Name,
                    //Ecosystem = Ecosystem.NuGet,    // TODO: 何も指定しないと自動的にGoに設定されてしまうので，Ecosystemにnullを設定できるように改変したものを使用
                },
                Version = pkg.Version,
            };

            var result = await _client.QueryAffectedAsync(query);

            return result.Vulnerabilities?.Any() ?? false;
        }
    }
}
