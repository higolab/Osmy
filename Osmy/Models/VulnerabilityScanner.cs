using OSV.Client.Models;
using OSV.Client;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using QuickGraph;
using Osmy.Models.Sbom;
using System.ComponentModel.DataAnnotations;
using System.Text.Json;

namespace Osmy.Models
{
    internal class VulnerabilityScanner : IDisposable
    {
        private readonly OSVClient _client = new();

        public void Dispose()
        {
            _client.Dispose();
        }

        public async Task<VulnerabilityScanResult> Scan(Sbom.Sbom sbom)
        {
            // MEMO: dfs.VisitedGraphはコンストラクタで渡したグラフのことで，実際に訪問した頂点と辺からなるグラフではない
            var dfs = new QuickGraph.Algorithms.Search.DepthFirstSearchAlgorithm<Package, IEdge<Package>>(sbom.DependencyGraph);
            var visited = new HashSet<Package>() { sbom.RootPackage };
            dfs.TreeEdge += x => visited.Add(x.Target);
            dfs.Compute(sbom.RootPackage);

            var scanResult = new VulnerabilityScanResult(sbom.Software);

            foreach (Package pkg in visited)
            {
                scanResult.Results.Add(await ScanPackageVulnerability(pkg));
            }

            return scanResult;
        }

        private async Task<PackageScanResult> ScanPackageVulnerability(Package pkg)
        {
            var query = new Query
            {
                Package = new OSV.Schema.Package
                {
                    Name = pkg.Name,
                    Ecosystem = OSV.Schema.Ecosystem.NuGet,    // TODO: 何も指定しないと自動的にGoに設定されてしまうので，Ecosystemにnullを設定できるように改変したものを使用
                },
                Version = pkg.Version,
            };

            var result = await _client.QueryAffectedAsync(query);

            return new PackageScanResult(pkg, result);
        }
    }

    public class VulnerabilityScanResult
    {
        [Key]
        public int Id { get; set; }

        public int SoftwareId { get; set; }
        public virtual Software Software { get; set; }

        public DateTime Executed { get; set; }
        public virtual List<PackageScanResult> Results { get; set; }

        public VulnerabilityScanResult()
        {
            Executed = DateTime.Now;
            Results = new List<PackageScanResult>();
            Software = default!;
        }

        public VulnerabilityScanResult(Software software) : this()
        {
            Software = software;
        }
    }

    public class PackageScanResult
    {
        [Key]
        public int Id { get; set; }
        public virtual Package Package { get; set; }
        public bool IsVulnerable { get; set; }

        /// <summary>
        /// 診断結果のJSON文字列
        /// </summary>
        public string ResultJson { get; set; }

        public VulnerabilityList VulnerabilityList => _vulnerabilityList ??= (JsonSerializer.Deserialize<VulnerabilityList>(ResultJson) ?? new VulnerabilityList());
        private VulnerabilityList? _vulnerabilityList;

        public PackageScanResult()
        {
            Package = default!;
            ResultJson = default!;
        }

        public PackageScanResult(Package package, VulnerabilityList result)
        {
            Package = package;
            IsVulnerable = result?.Vulnerabilities?.Any() ?? false;
            ResultJson = JsonSerializer.Serialize(result); ;
        }
    }
}
