using Osmy.Models;
using Osmy.Models.Sbom;
using Osmy.Properties;
using System;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace Osmy.Services
{
    internal class VulnerabilityScanService : BackgroundService
    {
        private readonly IAppNotificationService _appNotificationService;

        /// <summary>
        /// 自動診断が必要なソフトウェアが存在するかをチェックする間隔
        /// </summary>
        public TimeSpan AutoScanCheckInterval { get; set; } = TimeSpan.FromMinutes(5);

        public VulnerabilityScanService(IAppNotificationService appNotificationService)
        {
            _appNotificationService = appNotificationService;
        }

        protected override Task ExecuteAsync(CancellationToken stoppingToken)
        {
            var autoScanTask = Task.Run(() => StartAutoScanRequest(stoppingToken), stoppingToken);
            return autoScanTask;
        }

        public Task<VulnerabilityScanResult> Scan(Sbom sbom, CancellationToken cancellationToken = default)
        {
            using var vulnerabilityScanner = new VulnerabilityScanner();
            return vulnerabilityScanner.Scan(sbom, cancellationToken);
        }

        private async Task StartAutoScanRequest(CancellationToken stoppingToken)
        {
            while (true)
            {
                using (var context = new ManagedSoftwareContext())
                {
                    var before = DateTime.Now.Subtract(Settings.Default.VulnerabilityScanInterval);

                    // 前回スキャンから一定期間経過しているSBOMのリストを作成
                    var sbomsNotScannedRecently = context.Sboms
                        .Join(context.ScanResults,
                            sbom => sbom.Id,
                            scanResult => scanResult.SbomId,
                            (sbom, scanResult) => new { Sbom = sbom, ScanResult = scanResult })
                        .GroupBy(x => x.Sbom)
                        .Select(x => new { Sbom = x.Key, Executed = x.Select(item => item.ScanResult).Max(item => item.Executed) })
                        .Where(x => x.Executed <= before)
                        .Select(x => x.Sbom)
                        .ToArray();

                    // 一度もスキャンされていないSBOMのリストを作成
                    var sbomsNeverScanned = context.Sboms
                        .Select(sbom => sbom.Id)
                        .Except(context.ScanResults.Select(x => x.SbomId).Distinct())
                        .Select(id => context.Sboms.First(sbom => sbom.Id == id))
                        .ToArray();

                    // スキャンが必要なSBOMのリストを作成
                    var sbomsNeedScan = sbomsNotScannedRecently.Concat(sbomsNeverScanned);

                    using var vulnerabilityScanner = new VulnerabilityScanner();
                    var result = await vulnerabilityScanner.Scan(sbomsNeedScan, stoppingToken).ConfigureAwait(false);
                    context.ScanResults.AddRange(result);

                    await context.SaveChangesAsync(stoppingToken).ConfigureAwait(false);
                }

                _appNotificationService.NotifyVulnerability();

                await Task.Delay(AutoScanCheckInterval, stoppingToken).ConfigureAwait(false);
            }
        }
    }
}
