using Microsoft.EntityFrameworkCore;
using Osmy.Server.Data;

namespace Osmy.Server.Services
{
    internal class VulnerabilityScanService : QueueingBackgroundService<long>
    {
        //private readonly IAppNotificationService _appNotificationService;

        /// <summary>
        /// 自動診断が必要なソフトウェアが存在するかをチェックする間隔
        /// </summary>
        public TimeSpan AutoScanCheckInterval { get; set; } = TimeSpan.FromMinutes(5);

        public VulnerabilityScanService(/*IAppNotificationService appNotificationService*/)
        {
            //_appNotificationService = appNotificationService;
        }

        protected override Task ExecuteAsync(CancellationToken stoppingToken)
        {
            var autoScanTask = Task.Run(() => StartAutoScanRequest(stoppingToken), stoppingToken);
            return Task.WhenAll(base.ExecuteAsync(stoppingToken), autoScanTask);
        }

        protected override Task ProcessAsync(long item, CancellationToken cancellationToken)
        {
            return ScanVulnerabilityAsync(item, cancellationToken);
        }

        public Task ScanAsync(long sbomId, CancellationToken cancellationToken = default)
        {
            return EnqueueManual(sbomId, cancellationToken);
        }

        private async Task StartAutoScanRequest(CancellationToken stoppingToken)
        {
            while (true)
            {
                using (var context = new SoftwareDbContext())
                {
                    var before = DateTime.Now.Subtract(Settings.Common.VulnerabilityScanInterval);

                    // 前回スキャンから一定期間経過している，または一度もスキャンされていないSBOMのIDリストを作成
                    var sbomsScannnedRecently = context.ScanResults.Where(x => x.Executed > before).Select(x => x.SbomId);
                    var sbomIdsNeedScan = context.Sboms.Select(x => x.Id).Except(sbomsScannnedRecently).ToArray();

                    foreach (var sbomId in sbomIdsNeedScan)
                    {
                        await EnqueueAuto(sbomId, stoppingToken);
                    }
                }

                // TODO
                var appNotificationService = new AppNotificationService();
                appNotificationService.NotifyVulnerability();

                await Task.Delay(AutoScanCheckInterval, stoppingToken);
            }
        }

        private static async Task ScanVulnerabilityAsync(long sbomId, CancellationToken cancellationToken)
        {
            using var dbContext = new SoftwareDbContext();
            var sbom = await dbContext.Sboms.FirstOrDefaultAsync(x => x.Id == sbomId, cancellationToken)
                ?? throw new InvalidOperationException($"SBOM(id={sbomId}) is not found");

            using var vulnerabilityScanner = new VulnerabilityScanner();
            var result = await vulnerabilityScanner.Scan(sbom, cancellationToken);
            dbContext.ScanResults.AddRange(result);

            await dbContext.SaveChangesAsync(cancellationToken);
        }
    }
}
