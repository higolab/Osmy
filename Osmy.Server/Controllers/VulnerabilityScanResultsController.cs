using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Osmy.Server.Data;
using Osmy.Server.Data.Sbom;

namespace Osmy.Server.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class VulnerabilityScanResultsController : ControllerBase
    {
        [HttpGet("{id}")]
        public async Task<ActionResult<Core.Data.Sbom.VulnerabilityScanResult>> Get(long id)
        {
            using var dbContext = new SoftwareDbContext();
            var scanResult = await dbContext.ScanResults
                .Include(x => x.Results).ThenInclude(x => x.Package)
                .Include(x => x.Sbom)
                .FirstOrDefaultAsync(x => x.Id == id);

            if (scanResult is null)
            {
                return NotFound();
            }

            return SbomDataConverter.ConvertVulnerabilityScanResult(scanResult);
        }

        [HttpGet("latest/{sbomId}")]
        public async Task<ActionResult<Core.Data.Sbom.VulnerabilityScanResult>> GetLatest(long sbomId)
        {
            using var dbContext = new SoftwareDbContext();
            var latestScanResultId = (await dbContext.ScanResults
                .Where(x => x.SbomId == sbomId)
                .OrderByDescending(x => x.Executed)
                .FirstOrDefaultAsync())
                ?.Id;

            if (latestScanResultId is null)
            {
                return NotFound();
            }

            var scanResult = await dbContext.ScanResults
                .Include(x => x.Results).ThenInclude(x => x.Package)
                .Include(x => x.Sbom)
                .FirstOrDefaultAsync(x => x.Id == latestScanResultId);

            if (scanResult is null)
            {
                return NotFound();
            }

            return SbomDataConverter.ConvertVulnerabilityScanResult(scanResult);
        }
    }
}
